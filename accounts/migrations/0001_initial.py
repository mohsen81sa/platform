# Generated by Django 5.2.4 on 2025-08-05 12:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('instagram', 'اینستاگرام'), ('telegram', 'تلگرام'), ('whatsapp', 'واتساپ'), ('twitter', 'توییتر'), ('linkedin', 'لینکدین'), ('facebook', 'فیسبوک'), ('other', 'سایر موارد')], max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('MANAGER', 'Manager'), ('EDITOR', 'Editor'), ('USER', 'User')], default='USER', max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssetLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asset_libraries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('other', 'Other')], max_length=20)),
                ('file', models.FileField(upload_to='assets/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='accounts.assetlibrary')),
                ('tags', models.ManyToManyField(blank=True, to='accounts.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('title', models.CharField(max_length=200)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'در انتظار'), ('active', 'فعال'), ('completed', 'تکمیل شده'), ('paused', 'متوقف شده')], default='pending', max_length=50)),
                ('execution_period', models.CharField(help_text="مثل: '*/5 * * * *' برای Celery Beat", max_length=100)),
                ('prompt', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('asset_library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='accounts.assetlibrary')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='accounts.platform')),
                ('tags', models.ManyToManyField(blank=True, to='accounts.tag')),
            ],
        ),
        migrations.CreateModel(
            name='CampaignPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('publish_date', models.DateTimeField()),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='accounts.campaign')),
            ],
        ),
        migrations.CreateModel(
            name='CampaignSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crontab_schedule', models.CharField(help_text="Format: 'minute hour day_of_week month day_of_month' (e.g., '*/15 * * * *' for every 15 minutes)", max_length=100, verbose_name='Crontab Schedule')),
                ('last_run_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Run At')),
                ('next_run_at', models.DateTimeField(blank=True, null=True, verbose_name='Next Run At')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Is Enabled')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='accounts.campaign', verbose_name='Campaign')),
            ],
            options={
                'verbose_name': 'Campaign Schedule',
                'verbose_name_plural': 'Campaign Schedules',
            },
        ),
        migrations.CreateModel(
            name='PostAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.asset')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.campaignpost')),
            ],
            options={
                'unique_together': {('post', 'asset')},
            },
        ),
        migrations.AddField(
            model_name='campaignpost',
            name='assets',
            field=models.ManyToManyField(through='accounts.PostAsset', to='accounts.asset'),
        ),
        migrations.CreateModel(
            name='PostLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=50)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='log', to='accounts.campaignpost')),
            ],
        ),
        migrations.CreateModel(
            name='GeneratedContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(max_length=50, verbose_name='Platform')),
                ('content', models.TextField(verbose_name='Content')),
                ('image', models.ImageField(blank=True, null=True, upload_to='generated_content_images/', verbose_name='Image')),
                ('publish_status', models.CharField(choices=[('draft', 'Draft'), ('pending_publish', 'Pending Publish'), ('published', 'Published'), ('failed_publish', 'Failed Publish')], default='draft', max_length=20, verbose_name='Publish Status')),
                ('publish_error_message', models.TextField(blank=True, null=True, verbose_name='Publish Error Message')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Published At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_contents', to='accounts.campaign', verbose_name='Campaign')),
                ('original_asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_contents', to='accounts.asset', verbose_name='Original Asset')),
            ],
            options={
                'verbose_name': 'Generated Content',
                'verbose_name_plural': 'Generated Contents',
                'unique_together': {('campaign', 'platform', 'created_at')},
            },
        ),
    ]
